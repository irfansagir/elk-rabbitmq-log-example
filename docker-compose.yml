version: "3.4"

services:
  odfe-node1:
    image: amazon/opendistro-for-elasticsearch:1.6.0
    # container_name: odfe-node1
    environment:
      - cluster.name=odfe-cluster
      - node.name=odfe-node1
      - discovery.seed_hosts=odfe-node1 # ,odfe-node2
      - cluster.initial_master_nodes=odfe-node1 # ,odfe-node2
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the Elasticsearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - ./docker/elasticsearch/storage/odfe-data1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9600:9600 # required for Performance Analyzer
    networks:
      - odfe-net
  # odfe-node2:
  #   image: amazon/opendistro-for-elasticsearch:1.6.0
  #   container_name: odfe-node2
  #   environment:
  #     - cluster.name=odfe-cluster
  #     - node.name=odfe-node2
  #     - discovery.seed_hosts=odfe-node1,odfe-node2
  #     - cluster.initial_master_nodes=odfe-node1,odfe-node2
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   volumes:
  #     - odfe-data2:/usr/share/elasticsearch/data
  #   networks:
  #     - odfe-net
  kibana:
    image: amazon/opendistro-for-elasticsearch-kibana:1.6.0
    # container_name: odfe-kibana
    ports:
      - 5601:5601
    expose:
      - "5601"
    environment:
      ELASTICSEARCH_URL: https://odfe-node1:9200
      ELASTICSEARCH_HOSTS: https://odfe-node1:9200
    networks:
      - odfe-net
  logstash:
    image: blacktop/logstash
    # container_name: logstash
    ports:
      - "5011:5011"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - odfe-node1
    command: bash -c "logstash -f /etc/logstash/conf.d/logstash.conf"
    volumes:
      - ./docker/logstash/config:/etc/logstash/conf.d
    networks:
      - odfe-net
  rabbitmq:
    image: "rabbitmq:3-management-alpine"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - odfe-net
  servicea:
    image: ${DOCKER_REGISTRY-}servicea
    build:
      context: .
      dockerfile: src/ServiceA/Dockerfile
    ports:
      - "32220:80"
      - "32221:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    networks:
      - odfe-net
    depends_on:
      - serviceb
      - rabbitmq
  serviceb:
    image: ${DOCKER_REGISTRY-}serviceb
    build:
      context: .
      dockerfile: src/ServiceB/Dockerfile
    ports:
      - "32222:80"
      - "32223:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    networks:
      - odfe-net
    depends_on:
      - servicec
      - rabbitmq
  servicec:
    image: ${DOCKER_REGISTRY-}servicec
    build:
      context: .
      dockerfile: src/ServiceC/Dockerfile
    ports:
      - "32224:80"
      - "32225:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    networks:
      - odfe-net
    depends_on:
      - rabbitmq

volumes:
  odfe-data1:
  # odfe-data2:

networks:
  odfe-net:
    driver: bridge
